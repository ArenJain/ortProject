
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  userName: 'userName',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ScanScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  gitRunId: 'gitRunId',
  projectId: 'projectId'
};

exports.Prisma.AnalyzerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  scanId: 'scanId'
};

exports.Prisma.AnalyzerPackageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  packId: 'packId',
  purl: 'purl',
  description: 'description',
  homepageUrl: 'homepageUrl',
  analyzerId: 'analyzerId'
};

exports.Prisma.PackageAuthorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  packageId: 'packageId'
};

exports.Prisma.DeclaredLicensesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  packageId: 'packageId'
};

exports.Prisma.DeclaredLicensesProcessedScalarFieldEnum = {
  id: 'id',
  spdxExpression: 'spdxExpression',
  packageId: 'packageId'
};

exports.Prisma.BinaryArtifactScalarFieldEnum = {
  id: 'id',
  url: 'url',
  packageId: 'packageId'
};

exports.Prisma.SourceArtifactScalarFieldEnum = {
  id: 'id',
  url: 'url',
  packageId: 'packageId'
};

exports.Prisma.VcsScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  revision: 'revision',
  path: 'path',
  packageId: 'packageId'
};

exports.Prisma.VcsProcessedScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  revision: 'revision',
  path: 'path',
  packageId: 'packageId'
};

exports.Prisma.ScannerScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  scanId: 'scanId'
};

exports.Prisma.LicensesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  licenseName: 'licenseName',
  path: 'path',
  startLine: 'startLine',
  endLine: 'endLine',
  score: 'score',
  scannerId: 'scannerId'
};

exports.Prisma.CopyrightsScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  statement: 'statement',
  path: 'path',
  startLine: 'startLine',
  endLine: 'endLine',
  scannerId: 'scannerId'
};

exports.Prisma.AdvisorScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  scanId: 'scanId'
};

exports.Prisma.AdvisorPackageScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  name: 'name',
  advisorId: 'advisorId'
};

exports.Prisma.VulnerabilitiesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  vulId: 'vulId',
  summary: 'summary',
  description: 'description',
  advisorPackageId: 'advisorPackageId'
};

exports.Prisma.ReferencesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  url: 'url',
  scoringSystem: 'scoringSystem',
  severity: 'severity',
  score: 'score',
  vector: 'vector',
  vulnerabilitiesId: 'vulnerabilitiesId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Scan: 'Scan',
  Analyzer: 'Analyzer',
  AnalyzerPackage: 'AnalyzerPackage',
  PackageAuthor: 'PackageAuthor',
  DeclaredLicenses: 'DeclaredLicenses',
  DeclaredLicensesProcessed: 'DeclaredLicensesProcessed',
  BinaryArtifact: 'BinaryArtifact',
  SourceArtifact: 'SourceArtifact',
  Vcs: 'Vcs',
  VcsProcessed: 'VcsProcessed',
  Scanner: 'Scanner',
  Licenses: 'Licenses',
  Copyrights: 'Copyrights',
  Advisor: 'Advisor',
  AdvisorPackage: 'AdvisorPackage',
  Vulnerabilities: 'Vulnerabilities',
  References: 'References'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
